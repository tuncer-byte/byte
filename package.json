{
  "name": "byte",
  "displayName": "Byte AI Assistant",
  "description": "AI-powered coding assistant that helps developers write, analyze, refactor, and optimize code. Features include code explanation, documentation generation, unit test creation, and intelligent suggestions to improve code quality and productivity.",
  "version": "0.1.1",
  "publisher": "byte",
  "author": {
    "name": "Tuncer Bagcabasi"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/tuncer-byte/byte"
  },
  "license": "MIT",
  "icon": "media/icons/icon-white.png",
  "engines": {
    "vscode": "^1.74.0"
  },
  "categories": [
    "Other",
    "Programming Languages",
    "Machine Learning",
    "Education"
  ],
  "activationEvents": [
    "onStartupFinished"
  ],
  "main": "./out/extension.js",
  "contributes": {
    "viewsContainers": {
      "activitybar": [
        {
          "id": "ai-assistant",
          "title": "Byte AI Assistant",
          "icon": "media/icons/icon.png"
        }
      ]
    },
    "views": {
      "ai-assistant": [
        {
          "id": "byteChatView",
          "name": "AI Chat",
          "type": "webview"
        }
      ]
    },
    "commands": [
      {
        "command": "byte.openChat",
        "title": "Byte: Open AI Chat"
      },
      {
        "command": "byte.explainCode",
        "title": "Byte: Explain Selected Code"
      },
      {
        "command": "byte.refactorCode",
        "title": "Byte: Refactor Selected Code"
      },
      {
        "command": "byte.configureAI",
        "title": "Byte: Configure AI Service"
      },
      {
        "command": "byte.generateDocs",
        "title": "Byte: Generate Documentation"
      },
      {
        "command": "byte.optimizeCode",
        "title": "Byte: Optimize Code"
      },
      {
        "command": "byte.generateTests",
        "title": "Byte: Generate Unit Tests"
      },
      {
        "command": "byte.addComments",
        "title": "Byte: Add Comments to Code"
      },
      {
        "command": "byte.findIssues",
        "title": "Byte: Analyze Code Issues"
      },
      {
        "command": "byte.inlineCodeAnalysis",
        "title": "Byte: Analyze Selected Code",
        "icon": "$(sparkle)"
      },
      {
        "command": "byte.askQuestionAboutCode",
        "title": "Byte: Ask Question About Selected Code"
      },
      {
        "command": "byte.openInlineChat",
        "title": "Byte: Open Code Analysis Chat"
      },
      {
        "command": "byte.clearConversation",
        "title": "Byte: Clear Conversation"
      },
      {
        "command": "byte.startErrorMonitoring",
        "title": "Byte: Start Terminal Error Monitoring"
      },
      {
        "command": "byte.stopErrorMonitoring",
        "title": "Byte: Stop Terminal Error Monitoring"
      },
      {
        "command": "byte.analyzeError",
        "title": "Byte: Analyze Error Message"
      }
    ],
    "keybindings": [
      {
        "command": "byte.inlineCodeAnalysis",
        "key": "ctrl+alt+i",
        "mac": "cmd+alt+i",
        "when": "editorHasSelection"
      },
      {
        "command": "byte.askQuestionAboutCode",
        "key": "ctrl+alt+q",
        "mac": "cmd+alt+q",
        "when": "editorHasSelection"
      },
      {
        "command": "byte.openInlineChat",
        "key": "ctrl+alt+c",
        "mac": "cmd+alt+c"
      }
    ],
    "menus": {
      "editor/context": [
        {
          "submenu": "byte.menu",
          "when": "editorHasSelection",
          "group": "navigation"
        }
      ],
      "byte.menu": [
        {
          "command": "byte.inlineCodeAnalysis",
          "group": "z_byte@1"
        },
        {
          "command": "byte.askQuestionAboutCode",
          "group": "z_byte@2"
        },
        {
          "command": "byte.openInlineChat",
          "group": "z_byte@3"
        },
        {
          "command": "byte.explainCode",
          "group": "z_byte@4"
        },
        {
          "command": "byte.refactorCode",
          "group": "z_byte@5"
        },
        {
          "command": "byte.generateDocs",
          "group": "z_byte@6"
        },
        {
          "command": "byte.optimizeCode",
          "group": "z_byte@7"
        },
        {
          "command": "byte.generateTests",
          "group": "z_byte@8"
        },
        {
          "command": "byte.addComments",
          "group": "z_byte@9"
        },
        {
          "command": "byte.findIssues",
          "group": "z_byte@10"
        }
      ]
    },
    "submenus": [
      {
        "id": "byte.menu",
        "label": "Byte AI Assistant"
      }
    ],
    "configuration": {
      "title": "Byte",
      "properties": {
        "byte.provider": {
          "type": "string",
          "enum": [
            "openai",
            "gemini",
            "local",
            "anthropic"
          ],
          "default": "openai",
          "description": "Select AI service provider"
        },
        "byte.openai.apiKey": {
          "type": "string",
          "default": "",
          "description": "OpenAI API key (it's recommended to store in Secret Storage for security)"
        },
        "byte.openai.model": {
          "type": "string",
          "enum": [
            "gpt-3.5-turbo",
            "gpt-4",
            "gpt-4-turbo"
          ],
          "default": "gpt-3.5-turbo",
          "description": "OpenAI model to use"
        },
        "byte.gemini.apiKey": {
          "type": "string",
          "default": "",
          "description": "Google Gemini API key"
        },
        "byte.gemini.model": {
          "type": "string",
          "enum": [
            "gemini-1.5-flash",
            "gemini-1.5-pro"
          ],
          "default": "gemini-1.5-flash",
          "description": "Google Gemini model to use"
        },
        "byte.local.endpoint": {
          "type": "string",
          "default": "http://localhost:11434/api/generate",
          "description": "Ollama service endpoint URL"
        },
        "byte.local.model": {
          "type": "string",
          "enum": [
            "llama3",
            "codellama",
            "mistral",
            "mixtral",
            "neural-chat",
            "phi"
          ],
          "default": "codellama",
          "description": "Model name to use in Ollama"
        },
        "byte.saveHistory": {
          "type": "boolean",
          "default": true,
          "description": "Save chat history between sessions"
        },
        "byte.anthropic.apiKey": {
          "type": "string",
          "default": "",
          "description": "Anthropic API key for Claude models"
        },
        "byte.anthropic.model": {
          "type": "string",
          "enum": [
            "claude-3-opus",
            "claude-3-sonnet",
            "claude-3-haiku"
          ],
          "default": "claude-3-sonnet",
          "description": "Anthropic Claude model to use"
        },
        "byteAI.apiKey": {
          "type": "string",
          "default": "",
          "description": "Byte AI API key"
        },
        "byteAI.apiEndpoint": {
          "type": "string",
          "default": "https://api.byteai.app/v1",
          "description": "Byte AI API endpoint URL"
        },
        "byte.autoSwitch": {
          "type": "boolean",
          "default": false,
          "description": "Enable automatic model switching based on task complexity and cost optimization"
        },
        "byte.autoSwitch.metrics": {
          "type": "object",
          "properties": {
            "maxCostPerDay": {
              "type": "number",
              "default": 1,
              "description": "Maximum cost allowed per day in USD"
            },
            "preferredProvider": {
              "type": "string",
              "enum": [
                "fastest",
                "cheapest",
                "most-accurate"
              ],
              "default": "most-accurate",
              "description": "Preferred optimization strategy for auto-switching"
            }
          },
          "default": {
            "maxCostPerDay": 1,
            "preferredProvider": "most-accurate"
          },
          "description": "Auto-switch configuration metrics"
        },
        "byte.cache.enabled": {
          "type": "boolean",
          "default": true,
          "description": "Enable API response caching to reduce token usage and improve response time"
        },
        "byte.cache.defaultTtl": {
          "type": "string",
          "default": "3600s",
          "description": "Default time-to-live for cached content (in seconds, use format like '3600s')"
        },
        "byte.cache.maxCachedItems": {
          "type": "number",
          "default": 50,
          "description": "Maximum number of cached items to store"
        },
        "byte.cache.automaticCaching": {
          "type": "boolean",
          "default": true,
          "description": "Automatically cache content for reuse with similar queries"
        }
      }
    }
  },
  "scripts": {
    "vscode:prepublish": "npm run compile",
    "compile": "tsc -p ./",
    "watch": "tsc -watch -p ./",
    "pretest": "npm run compile && npm run lint",
    "lint": "eslint src",
    "test": "vscode-test"
  },
  "devDependencies": {
    "@types/axios": "^0.14.4",
    "@types/mocha": "^10.0.10",
    "@types/node": "20.x",
    "@types/node-fetch": "^2.6.12",
    "@types/vscode": "^1.98.0",
    "@typescript-eslint/eslint-plugin": "^8.28.0",
    "@typescript-eslint/parser": "^8.28.0",
    "@vscode/test-cli": "^0.0.10",
    "@vscode/test-electron": "^2.4.1",
    "eslint": "^9.23.0",
    "typescript": "^5.8.2"
  },
  "dependencies": {
    "axios": "^1.8.4",
    "node-fetch": "^2.6.7"
  },
  "enabledApiProposals": [
    "terminalDataWriteEvent"
  ]
}
